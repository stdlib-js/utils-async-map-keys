{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/limit.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next own property\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {},\n*     'series': false,\n*     'limit': 10\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0iY2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'series' ) ) {\n\t\topts.series = options.series;\n\t\tif ( !isBoolean( opts.series ) ) {\n\t\t\treturn new TypeError( format( '0iY30', 'series', opts.series ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'limit' ) ) {\n\t\topts.limit = options.limit;\n\t\tif ( !isPositiveInteger( opts.limit ) ) {\n\t\t\treturn new TypeError( format( '0iY3b', 'limit', opts.limit ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport objectKeys from '@stdlib/utils-keys' ;\n\n\n// VARIABLES //\n\nvar debug = logger( 'map-values-async:limit' );\n\n\n// MAIN //\n\n/**\n* Invokes a function once for each own property in a source object, limiting the number of concurrently pending functions.\n*\n* ## Notes\n*\n* -   Iteration order is **not** guaranteed.\n* -   We need to cache an object value to prevent the edge case where, during the invocation of the transform function, the value corresponding to a particular key is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.\n*\n*\n* @private\n* @param {Object} obj - source object\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {PositiveInteger} [opts.limit] - maximum number of pending function invocations\n* @param {Function} fcn - function to invoke\n* @param {Callback} done - function to invoke upon completion or upon encountering an error\n* @returns {void}\n*/\nfunction limit( obj, opts, fcn, done ) {\n\tvar maxIndex;\n\tvar count;\n\tvar keys;\n\tvar flg;\n\tvar lim;\n\tvar len;\n\tvar idx;\n\tvar out;\n\tvar i;\n\n\tkeys = objectKeys( obj );\n\tlen = keys.length;\n\tdebug( 'Number of keys: %d', len );\n\n\tout = {};\n\tif ( len === 0 ) {\n\t\tdebug( 'Finished processing an object.' );\n\t\treturn done( null, out );\n\t}\n\tif ( len < opts.limit ) {\n\t\tlim = len;\n\t} else {\n\t\tlim = opts.limit;\n\t}\n\tdebug( 'Concurrency limit: %d', lim );\n\tdebug( 'Number of arguments: %d', fcn.length );\n\n\tmaxIndex = len - 1;\n\tcount = 0;\n\tidx = -1;\n\tfor ( i = 0; i < lim; i++ ) {\n\t\t// This guard is necessary to protect against synchronous functions which exhaust all properties...\n\t\tif ( idx < maxIndex ) {\n\t\t\tnext(); // eslint-disable-line node/callback-return\n\t\t}\n\t}\n\t/**\n\t* Callback to invoke a provided function for the next property.\n\t*\n\t* @private\n\t*/\n\tfunction next() {\n\t\tvar value;\n\t\tvar key;\n\n\t\tidx += 1;\n\t\tkey = keys[ idx ];\n\n\t\tvalue = obj[ key ];\n\t\tdebug( '%s: %s', key, JSON.stringify( value ) );\n\n\t\tif ( fcn.length === 2 ) {\n\t\t\tfcn.call( opts.thisArg, key, cb );\n\t\t} else if ( fcn.length === 3 ) {\n\t\t\tfcn.call( opts.thisArg, key, value, cb );\n\t\t} else {\n\t\t\tfcn.call( opts.thisArg, key, value, obj, cb );\n\t\t}\n\t\t/**\n\t\t* Callback invoked once a provided function finishes transforming a property.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {*} [key] - transformed key\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction cb( error, key ) {\n\t\t\tif ( flg ) {\n\t\t\t\t// Prevent further processing of properties:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tflg = true;\n\t\t\t\treturn clbk( error );\n\t\t\t}\n\t\t\tdebug( 'Transform result => %s: %s', key, JSON.stringify( value ) );\n\t\t\tout[ key ] = value;\n\t\t\tclbk();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once ready to process the next property.\n\t*\n\t* @private\n\t* @param {*} [error] - error\n\t* @returns {void}\n\t*/\n\tfunction clbk( error ) {\n\t\tif ( error ) {\n\t\t\tdebug( 'Encountered an error: %s', error.message );\n\t\t\treturn done( error );\n\t\t}\n\t\tcount += 1;\n\t\tdebug( 'Processed %d of %d properties.', count, len );\n\t\tif ( idx < maxIndex ) {\n\t\t\treturn next();\n\t\t}\n\t\tif ( count === len ) {\n\t\t\tdebug( 'Finished processing an object.' );\n\t\t\treturn done( null, out );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default limit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport validate from './validate.js' ;\nimport limit from './limit.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a function to map keys from one object to a new object having the same values.\n*\n* ## Notes\n*\n* -   If a provided function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n* -   Iteration and insertion order are **not** guaranteed.\n* -   The function only operates on own properties, not inherited properties.\n*\n*\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next own property\n* @param {Function} transform - transform function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {Function} function which maps keys from one object to a new object having the same values\n*\n* @example\n* import readFile from '@stdlib/fs-read-file' ;\n*\n* function read( key, value, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( value, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, key+':unreadable' );\n*         }\n*         next( null, key+':readable' );\n*     }\n* }\n*\n* var opts = {\n*     'series': true\n* };\n*\n* // Create a reusable function:\n* var mapKeysAsync = factory( opts, read );\n*\n* // Create a dictionary of file names:\n* var files = {\n*     'file1': './beep.js',\n*     'file2': './boop.js'\n* };\n*\n* // Define a callback which handles errors:\n* function done( error, out ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* // Process each file in `files`:\n* mapKeysAsync( files, done );\n*/\nfunction factory( options, transform ) {\n\tvar opts;\n\tvar err;\n\tvar f;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tf = transform;\n\t} else {\n\t\tf = options;\n\t}\n\tif ( !isFunction( f ) ) {\n\t\tthrow new TypeError( format( '0iY43', f ) );\n\t}\n\tif ( opts.series ) {\n\t\topts.limit = 1;\n\t} else if ( !opts.limit ) {\n\t\topts.limit = PINF;\n\t}\n\treturn mapKeysAsync;\n\n\t/**\n\t* Maps keys from one object to a new object having the same values.\n\t*\n\t* @private\n\t* @param {Object} obj - source object\n\t* @param {Callback} done - function to invoke upon completion\n\t* @throws {TypeError} first argument must be an object\n\t* @throws {TypeError} last argument must be a function\n\t* @returns {void}\n\t*/\n\tfunction mapKeysAsync( obj, done ) {\n\t\tif ( typeof obj !== 'object' || obj === null ) {\n\t\t\tthrow new TypeError( format( '0iY3X', obj ) );\n\t\t}\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( '0iY43', done ) );\n\t\t}\n\t\treturn limit( obj, opts, f, clbk );\n\n\t\t/**\n\t\t* Callback invoked upon completion.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {Object} [out] - output object\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction clbk( error, out ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdone( null, out );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\n/**\n* Maps keys from one object to a new object having the same values.\n*\n* ## Notes\n*\n* -   If a provided function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n* -   Iteration and insertion order are **not** guaranteed.\n* -   The function only operates on own properties, not inherited properties.\n*\n*\n* @param {Object} obj - source object\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next own property\n* @param {Function} transform - transform function\n* @param {Callback} done - function to invoke upon completion\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} second-to-last argument must be a function\n* @throws {TypeError} last argument must be a function\n* @returns {void}\n*\n* @example\n* import readFile from '@stdlib/fs-read-file' ;\n*\n* function read( key, value, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( value, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, key+':unreadable' );\n*         }\n*         next( null, key+':readable' );\n*     }\n* }\n*\n* // Define a callback which handles errors:\n* function done( error, out ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* // Create a dictionary of file names:\n* var files = {\n*     'file1': './beep.js',\n*     'file2': './boop.js'\n* };\n*\n* var opts = {\n*     'series': true\n* };\n*\n* // Process each file in `files`:\n* mapKeysAsync( files, opts, read, done );\n*/\nfunction mapKeysAsync( obj, options, transform, done ) {\n\tif ( arguments.length < 4 ) {\n\t\treturn factory( options )( obj, transform );\n\t}\n\tfactory( options, transform )( obj, done );\n}\n\n\n// EXPORTS //\n\nexport default mapKeysAsync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Map keys from one object to a new object having the same values.\n*\n* @module @stdlib/utils-async-map-keys\n*\n* @example\n* import readFile from '@stdlib/fs-read-file' ;\n* import mapKeysAsync from '@stdlib/utils-async-map-keys' ;\n*\n* function read( key, value, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( value, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, key+':unreadable' );\n*         }\n*         next( null, key+':readable' );\n*     }\n* }\n*\n* // Define a callback which handles errors:\n* function done( error, out ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* // Create a dictionary of file names:\n* var files = {\n*     'file1': './beep.js',\n*     'file2': './boop.js'\n* };\n*\n* var opts = {\n*     'series': true\n* };\n*\n* // Process each file in `files`:\n* mapKeysAsync( files, opts, read, done );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["validate","opts","options","isObject","hasOwnProp","thisArg","series","isBoolean","TypeError","format","limit","isPositiveInteger","debug","logger","obj","fcn","done","maxIndex","count","keys","flg","lim","len","idx","out","i","objectKeys","length","next","value","key","cb","error","clbk","JSON","stringify","call","message","factory","transform","err","f","arguments","isFunction","PINF","mapKeysAsync","setReadOnly","main"],"mappings":"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"}